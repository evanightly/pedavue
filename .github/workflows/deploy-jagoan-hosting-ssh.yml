name: Deploy Laravel to Jagoan Hosting (SSH)

on:
  push:
    branches:
      - main
  workflow_dispatch:
          {
            printf '%s
      - name: Build assets
            printf '%s
        run: |
            printf '%s
          set -euo pipefail
            printf '%s
          npm run build
            printf '%s

            printf '%s
      - name: Sync build output into public/build
            printf '%s
        shell: bash
            printf '%s
        run: |
            printf '%s
          set -euo pipefail
            printf '%s
          mkdir -p public
            printf '%s
          if [[ -d build ]]; then
            printf '%s
            rm -rf public/build || true
            printf '%s
            rsync -a --delete build/ public/build/
            printf '%s
          fi
            printf '%s

            printf '%s
      - name: Clean up Node workspace
            printf '%s
        run: |
            printf '%s
          set -euo pipefail
            printf '%s
          rm -rf node_modules package-lock.json
            printf '%s

            printf '%s
      - name: Prepare release artifact
            printf '%s
        env:
            printf '%s
          SECRET_ENV: ${{ secrets.JAGOAN_ENV_PRODUCTION }}
            printf '%s
          SERVER_APP_DIR: ${{ secrets.JAGOAN_SERVER_APP_DIR }}
            printf '%s
          SERVER_PUBLIC_DIR: ${{ secrets.JAGOAN_SERVER_PUBLIC_DIR }}
            printf '%s
        run: |
            printf '%s
          set -euo pipefail
            printf '%s

            printf '%s
          RELEASE_NAME="release-${GITHUB_RUN_ID}-${GITHUB_RUN_ATTEMPT}-$(date +%Y%m%d%H%M%S)"
            printf '%s
          echo "RELEASE_NAME=${RELEASE_NAME}" >> "${GITHUB_ENV}"
            printf '%s

            printf '%s
          APP_ROOT="${SERVER_APP_DIR:-~/apps/pedavue}"
            printf '%s
          DOC_ROOT="${SERVER_PUBLIC_DIR:-~/public_html}"
            printf '%s

            printf '%s
          echo "REMOTE_APP_ROOT=${APP_ROOT}" >> "${GITHUB_ENV}"
            printf '%s
          echo "REMOTE_DOC_ROOT=${DOC_ROOT}" >> "${GITHUB_ENV}"
            printf '%s
          echo "REMOTE_RELEASE_PATH=${APP_ROOT}/releases/${RELEASE_NAME}" >> "${GITHUB_ENV}"
            printf '%s

            printf '%s
          DEPLOY_DIR="deploy-release"
            printf '%s
          rm -rf "${DEPLOY_DIR}"
            printf '%s
          mkdir -p "${DEPLOY_DIR}"
            printf '%s

            printf '%s
          rsync -a --delete \
            printf '%s
            --exclude '.git/' \
            printf '%s
            --exclude '.github/' \
            printf '%s
            --exclude 'deploy-release/' \
            printf '%s
            --exclude 'node_modules/' \
            printf '%s
            --exclude 'tests/' \
            printf '%s
            --exclude 'storage/logs/' \
            printf '%s
            --exclude 'storage/framework/cache/data/' \
            printf '%s
            --exclude '.env' \
            printf '%s
            ./ "${DEPLOY_DIR}/"
            printf '%s

          } > activate-release.sh
          rm -rf "${DEPLOY_DIR}/node_modules"

          if [[ -z "${SECRET_ENV}" ]]; then
            echo 'Missing secret JAGOAN_ENV_PRODUCTION with your production .env contents.' >&2
            exit 1
          fi

          printf '%s\n' "${SECRET_ENV}" > "${DEPLOY_DIR}/.env"
          chmod 600 "${DEPLOY_DIR}/.env" || true

          mkdir -p "${DEPLOY_DIR}/storage/framework/cache"
          mkdir -p "${DEPLOY_DIR}/storage/framework/sessions"
          mkdir -p "${DEPLOY_DIR}/storage/framework/views"
          mkdir -p "${DEPLOY_DIR}/bootstrap/cache"

      - name: Configure SSH
        env:
          SSH_PRIVATE_KEY: ${{ secrets.JAGOAN_SSH_PRIVATE_KEY }}
          SSH_KNOWN_HOSTS: ${{ secrets.JAGOAN_SSH_KNOWN_HOSTS }}
        run: |
          set -euo pipefail
          install -m 700 -d ~/.ssh
          printf '%s\n' "${SSH_PRIVATE_KEY}" > ~/.ssh/jagoan_key
          chmod 600 ~/.ssh/jagoan_key
          if [[ -n "${SSH_KNOWN_HOSTS:-}" ]]; then
            printf '%s\n' "${SSH_KNOWN_HOSTS}" > ~/.ssh/known_hosts
          else
            touch ~/.ssh/known_hosts
          fi

      - name: Upload release via rsync over SSH
        env:
          SSH_HOST: ${{ secrets.JAGOAN_SSH_HOST }}
          SSH_USER: ${{ secrets.JAGOAN_SSH_USER }}
          SSH_PORT: ${{ secrets.JAGOAN_SSH_PORT }}
          REMOTE_RELEASE_PATH: ${{ env.REMOTE_RELEASE_PATH }}
        run: |
          set -euo pipefail
          if [[ -z "${SSH_PORT}" ]]; then
            SSH_PORT=22
          fi

          RSYNC_SSH="ssh -i ~/.ssh/jagoan_key -p ${SSH_PORT} -o StrictHostKeyChecking=no"

          rsync -az --delete \
            --rsync-path="mkdir -p ${REMOTE_RELEASE_PATH} && rsync" \
            -e "${RSYNC_SSH}" \
            deploy-release/ \
            "${SSH_USER}@${SSH_HOST}:${REMOTE_RELEASE_PATH}/"

      - name: Activate release
        env:
          SSH_HOST: ${{ secrets.JAGOAN_SSH_HOST }}
          SSH_USER: ${{ secrets.JAGOAN_SSH_USER }}
          SSH_PORT: ${{ secrets.JAGOAN_SSH_PORT }}
          REMOTE_APP_ROOT: ${{ env.REMOTE_APP_ROOT }}
          REMOTE_DOC_ROOT: ${{ env.REMOTE_DOC_ROOT }}
          REMOTE_RELEASE_PATH: ${{ env.REMOTE_RELEASE_PATH }}
        run: |
          set -euo pipefail
          if [[ -z "${SSH_PORT}" ]]; then
            SSH_PORT=22
          fi

          {
            printf '%s\n' '#!/bin/bash'
            printf '%s\n' 'set -euo pipefail'
            printf '%s\n' ''
            printf '%s\n' 'APP_ROOT="__APP_ROOT__"'
            printf '%s\n' 'DOC_ROOT="__DOC_ROOT__"'
            printf '%s\n' 'RELEASE_PATH="__RELEASE_PATH__"'
            printf '%s\n' 'CURRENT_LINK="${APP_ROOT}/current"'
            printf '%s\n' 'RELEASES_DIR="${APP_ROOT}/releases"'
            printf '%s\n' ''
            printf '%s\n' 'mkdir -p "${RELEASES_DIR}"'
            printf '%s\n' 'ln -sfn "${RELEASE_PATH}" "${CURRENT_LINK}"'
            printf '%s\n' ''
            printf '%s\n' 'DOC_ROOT_ABS="$(readlink -f "${DOC_ROOT}")"'
            printf '%s\n' 'CURRENT_ABS="$(readlink -f "${CURRENT_LINK}")"'
            printf '%s\n' ''
            printf '%s\n' 'mkdir -p "${DOC_ROOT_ABS}"'
            printf '%s\n' ''
            printf '%s\n' 'if command -v rsync >/dev/null 2>&1; then'
            printf '%s\n' '  rsync -a --delete --exclude ''.well-known/'' "${CURRENT_ABS}/public/" "${DOC_ROOT_ABS}/"'
            printf '%s\n' 'else'
              printf '%s\n' '  find "${DOC_ROOT_ABS}" -mindepth 1 \( -path "${DOC_ROOT_ABS}/.well-known" -o -path "${DOC_ROOT_ABS}/.well-known/*" \) -prune -o -exec rm -rf {} +'
            printf '%s\n' '  cp -a "${CURRENT_ABS}/public/." "${DOC_ROOT_ABS}/"'
            printf '%s\n' 'fi'
            printf '%s\n' ''
            printf '%s\n' 'cat <<'\''PHP'\'' > "${DOC_ROOT_ABS}/index.php"'
            printf '%s\n' '<?php'
            printf '%s\n' ''
            printf '%s\n' 'use Illuminate\Foundation\Application;'
            printf '%s\n' 'use Illuminate\Http\Request;'
            printf '%s\n' ''
            printf '%s\n' 'define(''LARAVEL_START'', microtime(true));'
            printf '%s\n' ''
            printf '%s\n' 'if (file_exists('
            printf '%s\n' '    \$maintenance = ''${CURRENT_ABS}/storage/framework/maintenance.php'')) {'
            printf '%s\n' '    require \$maintenance;'
            printf '%s\n' '}'
            printf '%s\n' ''
            printf '%s\n' 'require ''${CURRENT_ABS}/vendor/autoload.php'';'
            printf '%s\n' ''
            printf '%s\n' '/** @var Application \$app */'
            printf '%s\n' '\$app = require_once ''${CURRENT_ABS}/bootstrap/app.php'';'
            printf '%s\n' ''
            printf '%s\n' '\$app->handleRequest(Request::capture());'
            printf '%s\n' 'PHP'
            printf '%s\n' ''
            printf '%s\n' 'rm -rf "${DOC_ROOT_ABS}/storage"'
            printf '%s\n' 'ln -s "${CURRENT_ABS}/storage/app/public" "${DOC_ROOT_ABS}/storage"'
            printf '%s\n' ''
            printf '%s\n' 'if [ -d "${RELEASES_DIR}" ]; then'
            printf '%s\n' '  cd "${RELEASES_DIR}"'
            printf '%s\n' '  ls -1dt */ 2>/dev/null | tail -n +6 | xargs -r rm -rf || true'
            printf '%s\n' 'fi'
          } > activate-release.sh

          sed -i "s|__APP_ROOT__|${REMOTE_APP_ROOT}|g" activate-release.sh
          sed -i "s|__DOC_ROOT__|${REMOTE_DOC_ROOT}|g" activate-release.sh
          sed -i "s|__RELEASE_PATH__|${REMOTE_RELEASE_PATH}|g" activate-release.sh

          scp -i ~/.ssh/jagoan_key -P "${SSH_PORT}" -o StrictHostKeyChecking=no activate-release.sh "${SSH_USER}@${SSH_HOST}:/tmp/activate-release.sh"
          ssh -i ~/.ssh/jagoan_key -p "${SSH_PORT}" -o StrictHostKeyChecking=no "${SSH_USER}@${SSH_HOST}" 'bash -seuo pipefail /tmp/activate-release.sh && rm /tmp/activate-release.sh'
          rm -f activate-release.sh
